using System.Windows.Controls;
using System.Windows;

namespace AlgSortWPF
{
    public class Descriptions
    {
        private readonly string _bubble = "Будем идти по массиву слева направо.\n " +
            "Если текущий элемент больше следующего, меняем их местами. \n" +
            "Делаем так, пока массив не будет отсортирован. \n" +
            "Заметим, что после первой итерации самый большой элемент будет находиться в конце массива.\n" +
            "После двух итераций на правильном месте будут стоять два наибольших элемента, и так далее. \n" +
            "Очевидно, не более чем после n итераций массив будет отсортирован.\n";
        private readonly string _insert = "Создадим массив, в котором после завершения алгоритма будет лежать ответ.\n" +
            "Будем поочередно вставлять элементы из исходного массива так, \n" +
            "чтобы элементы в массиве-ответе всегда были отсортированы.\n" +
            "Реализовывать алгоритм удобнее по-другому\n " +
            "(создавать новый массив и реально что-то вставлять в него относительно сложно):\n" +
            "просто сделаем так, чтобы отсортирован был некоторый префикс исходного массива,\n " +
            "вместо вставки будем менять текущий элемент с предыдущим, пока они стоят в неправильном порядке.\n";
        private readonly string _quick = "Выберем некоторый опорный элемент. \n" +
            "После этого перекинем все элементы, меньшие его, налево, а большие – направо. \n" +
            "Рекурсивно вызовемся от каждой из частей. В итоге получим отсортированный массив,\n" +
            "так как каждый элемент меньше опорного стоял раньше каждого большего опорного.\n" +
            "Наихудшая оценка достигается при неудачном выборе опорного элемента. \n" +
            "Идем одновременно слева и справа, находим пару элементов, таких, что левый элемент больше опорного,\n" +
            "а правый меньше, и меняем их местами.\n";
        private readonly string _heap = "это метод сортировки сравнением, основанный на такой структуре данных как двоичная куча.\n" +
            "Она похожа на сортировку выбором, \n" +
            "где мы сначала ищем максимальный элемент и помещаем его в конец.\n" +
            "Далее мы повторяем ту же операцию для оставшихся элементов.\n" +
            "Алгоритм пирамидальной сортировки в порядке по возрастанию:\n" +
            "1)Постройте max-heap из входных данных.\n" +
            "На данном этапе самый большой элемент хранится в корне кучи. \n" +
            "2)Замените его на последний элемент кучи, а затем уменьшите ее размер на 1.\n " +
            "3)Наконец, преобразуйте полученное дерево в max-heap с новым корнем.\n" +
            "4)Повторяйте вышеуказанные шаги, пока размер кучи больше 1.\n";

        //public Descriptions()
        //{
        //    ClearDesc();
        //    DoDesc();
        //}

        //private void DoDesc()
        //{
        //    if (MainViewModel._window.sortComboBox.SelectedItem != null)
        //    {
        //        string selectedSort = ((ComboBoxItem)MainViewModel._window.sortComboBox.SelectedItem).Content.ToString();

        //        switch (selectedSort)
        //        {
        //            case "Bubble Sort":
        //                MainViewModel._window.TextBox.Text = _bubble;
        //                break;
        //            case "Insertion Sort":
        //                MainViewModel._window.TextBox.Text = _insert;
        //                break;
        //            case "Quick Sort":
        //                MainViewModel._window.TextBox.Text = _quick;
        //                break;
        //            case "Heap Sort":
        //                MainViewModel._window.TextBox.Text = _heap;
        //                break;
        //            default:
        //                MessageBox.Show("Выберите тип сортировки.");
        //                break;
        //        }
        //    }
        //    else
        //    {
        //        MessageBox.Show("Выберите тип сортировки.");
        //    }
        //}

        //private static void ClearDesc()
        //{
        //    MainViewModel._window.TextBox.Text = string.Empty;
        //}
    }
}
